// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class OptionPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OptionPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OptionPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OptionPool", id.toString(), this);
  }

  static load(id: string): OptionPool | null {
    return store.get("OptionPool", id) as OptionPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get base(): string | null {
    let value = this.get("base");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set base(value: string | null) {
    if (value === null) {
      this.unset("base");
    } else {
      this.set("base", Value.fromString(value as string));
    }
  }

  get short(): string | null {
    let value = this.get("short");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set short(value: string | null) {
    if (value === null) {
      this.unset("short");
    } else {
      this.set("short", Value.fromString(value as string));
    }
  }

  get optionType(): string | null {
    let value = this.get("optionType");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set optionType(value: string | null) {
    if (value === null) {
      this.unset("optionType");
    } else {
      this.set("optionType", Value.fromString(value as string));
    }
  }

  get liquidity(): BigInt | null {
    let value = this.get("liquidity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set liquidity(value: BigInt | null) {
    if (value === null) {
      this.unset("liquidity");
    } else {
      this.set("liquidity", Value.fromBigInt(value as BigInt));
    }
  }

  get bcv(): BigInt | null {
    let value = this.get("bcv");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set bcv(value: BigInt | null) {
    if (value === null) {
      this.unset("bcv");
    } else {
      this.set("bcv", Value.fromBigInt(value as BigInt));
    }
  }

  get strike(): BigInt | null {
    let value = this.get("strike");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set strike(value: BigInt | null) {
    if (value === null) {
      this.unset("strike");
    } else {
      this.set("strike", Value.fromBigInt(value as BigInt));
    }
  }

  get maturity(): BigInt | null {
    let value = this.get("maturity");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maturity(value: BigInt | null) {
    if (value === null) {
      this.unset("maturity");
    } else {
      this.set("maturity", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Option extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Option entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Option entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Option", id.toString(), this);
  }

  static load(id: string): Option | null {
    return store.get("Option", id) as Option | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get user(): string | null {
    let value = this.get("user");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (value === null) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(value as string));
    }
  }

  get amountOut(): BigInt | null {
    let value = this.get("amountOut");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountOut(value: BigInt | null) {
    if (value === null) {
      this.unset("amountOut");
    } else {
      this.set("amountOut", Value.fromBigInt(value as BigInt));
    }
  }

  get amountIn(): BigInt | null {
    let value = this.get("amountIn");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amountIn(value: BigInt | null) {
    if (value === null) {
      this.unset("amountIn");
    } else {
      this.set("amountIn", Value.fromBigInt(value as BigInt));
    }
  }
}
